Здесь будет как обычно мое краткое руководство для, в этот раз Gunicorn

Сначала, для чего используется Gunicorn
	Он используется для соединения веб-сервера(Nginx) с кодом приложения на вашем языке программирования(Python)

Формула вычисления кол-ва воркеров:
	Обычно кол-во воркеров считается по формуле
	[Кол-во ядер в процессоре] * 2 + 1
	В файле конфигурации можно сделать так
	from multiprocessing import cpu_count
	...
	workers = cpu_count() * 2 + 1


Install gunicorn
	pip install gunicorn

Running Gunicorn
	Для запуска gunicorn надо использовать команду 
	gunicorn [Настройки] (Имя приложения)

	Мы собираемся использовать gunicorn для django и nginx
	gunicorn <project_name>.wsgi - запускает приложение джанго на сервере gunicorn(чтобы приложение работало надо запускать из папки с manage.py)

Configuration Gunicorn
	Чтобы проверить правильность составления конфиг файла, надо запустить команду gunicorn --check-config <configuration file>
	Чтобы использовать конфигурационный файл gunicorn надо запускать с флажком -c и путем к файлу конфигурации
	Пример:
		gunicorn -c <путь к файлу конфигурации(расширение .py)> <Название проекта>
	
	Standart settings configuration file:
		command - настривает по какому пути обращатся к gunicorn 
		pythonpath - настраивает по какому пути обращаться к python
		bind - на каком ip и на каком порте будет открыт сервер
		workers - кол-во воркеров (обычно считается по формуле (кол-во ядер * 2 + 1))
		user - от имени какого пользователя будет запускаться сервер
		limit_request_fields - отвечает за то, сколько заголовков может передать клиент (помогает в отражении DDOS атак)
		limit_reqiest_line - отвечате за ограничение длины строки http запроса (тоже ддос атаки)
		limit_request_fields_size - отвечает за допустимый размер ПОЛЯ 1 заголовка (при неограниченом иди очень высоком значении, часто становится причиной ддос) 
		raw_env	- переменные окружения в проекте


Nginx + Gunicorn + django (типо недопродакшн)

	1. Сначала надо сделать связь nginx с gunicorn, для этого заходим в конфигурационный файл nginx(Обычно, для каждого сайта своя конфигурация, 
		так что в нашем случае проходим по пути ~/etc/nginx/sites-enabled/default@)
	2. Настриваем его как обычный сайт, но тут главное понять как работает связь nginx и gunicorn, мы,  если нужно обратиться к бэкенду обращаемся через сервер
		nginx к серверу gunicorn на другой адрес(если nginx к примеру запущен на 127.0.0.1:80, а gunicorn на 127.0.0.1:9999, то мы обращаемся через нгинс на сервер
		127.0.0.1:9999
		Пример простейшей настройки nginx для запроса к серверу gunicorn
			server {
				listen 80 default_server;
				listen [::]:80 default_server;
	
				root /var/www/html;

				index index.html index.htm index.nginx-debian.html;

				server_name _;
				
				# Важное примечание, урлы джанго должны совпадать с location-ами, для кого-то это может быть не очевидно
				location / { #Вот тут начинается интересное 
					proxy_pass http://127.0.0.1:9999;  # Сервер, к которому переобращаемся(на котором запущен gunicorn)
					proxy_set_header X-Forwarded-Host $server_name; # Добавляем заголовок(в нем передается какой запрос использовал клиент http or https)
					proxy_set_header X-Real-IP $remote_addr; # Передаем ip адрес клиента серверу gunicorn
					add_header P3P 'CP="ALL DSP COR PSAa PSDa OUR NOR ONL UNI COM NAV"'; # хз для чего этот заголовок
					add_header Access-Control-Allow-Origin *; # Как я понял, позволяет gunicorn чуть-чуть контролировать nginx и преодолевает CORS
	
					}
				}
