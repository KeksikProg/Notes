Всю информацию беру со стрима Django School

Образы - объекты с помощью которых создаются контейнеры (в фалй образа указаны команды которые должны быть запущены сразу наподобие загрузки зависимостей )
Контейнер - некая изолированная от всех операционная система со своими программами и зависимостями
docker-compose - Это файл который позволяет управлять многоконейерностью (к примеру у нас в одном контейнере база данных а в другом проект которые взаимодействует с этой базой данных, то с помощью docker-compose мы можем сделать так чтобы они между собой связывались)





команды для создания образов
FROM <основа> - На основе чего будет создан наш контейнер докер
FROM python:3.8

ENV <переменная> <значение> - Какие будут системные переменные
ENV PYTHONINBUFFERED 1

WORKDIR <путь> - перейти в рабочий каталог(если его нет он его создаст)
WORKDIR /usr/src/dm_rest

COPY <файл1> <файл2> - копировать файл1 в контейнере в файл2
COPY ./req.txt /usr/src/req.txt

RUN <команда> - выполнить команду по загрузке зависимостей
RUN pip install -r usr/src/req.txt

EXPOSE <порт> - 
EXPOSE 8000

CMD <[составная команда]> - выполнить команду составную
CMD ['python', 'manage.py', 'runserver']






Command string

docker images  - посмотреть все образы которые у нас есть (на основе чего мы строим контейнер)
docker image rm <image_id> - удалить образ которым мы уже не будем пользоваться
docker ps - посмотреть все ЗАПУЩЕННЫЕ контейнеры
docker ps -a - посмотреть все контейнеры

docker build -t <имя> . - создать образ (не путать с контейнером(образ это то от чего создается контейнер))
docker run --name <имя> <образ> [-p <8000>:<8000> -d <образ> ] - запустить контейнер (в кадратных скобках указывается проброска портов(это штука которая позволяет с машины хоста ловить сигналы порта с докера))

docker container rm <> - удалить контейнер





docker compose
dc - имеет разрешение yml

version: <> - указывается версия dc

services: ... - контейнеры которые будут запускаться с помощью dc

Тут сначала надо коечто объяснить когда запускается контейнер он как настоящая система, но и когда нам надо внести изменения в билд он как система сносится а соотвественно и все файлы которые были там тоже сносятся и чтобы такого не было нужен volumes он сохраняет данные из конейнера на настоящий жесткий диск где они могут храниться и после выключения контейнера 

volumes: ... - место где хранятся данные 

docker-compose build - сделать образ но с compose
docker-compose up - поднять контейнер